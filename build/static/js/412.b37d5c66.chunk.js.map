{"version":3,"file":"static/js/412.b37d5c66.chunk.js","mappings":"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","sources":["libraries/form/input/input-password-form.tsx","modules/auth/sign-up/components/TermOfServiceModal.tsx","webpack://base-react-mui/./src/modules/auth/sign-up/styles.module.scss?2994","modules/auth/sign-up/service.ts","modules/auth/sign-up/index.tsx"],"sourcesContent":["import { Form } from 'antd';\nimport { Rule } from 'antd/lib/form';\nimport clsx from 'clsx';\nimport Input from 'libraries/UI/Input';\nimport styles from './styles.module.scss';\n\ninterface Props {\n  label?: string;\n  name: string;\n  rules?: Rule[];\n  placeholder?: string;\n  autoComplete?: 'on' | 'off';\n  dependencies?: string[];\n  normalize?: (value: any) => any;\n  // custom\n  classNameFormInput?: any;\n  className?: any;\n}\n\nexport default function InputPasswordForm({\n  label,\n  placeholder,\n  name,\n  rules,\n  autoComplete = 'off',\n  dependencies,\n  classNameFormInput,\n  className,\n  normalize\n}: Props) {\n  return (\n    <Form.Item\n      label={label}\n      name={name}\n      rules={rules}\n      normalize={normalize}\n      className={clsx(styles.customInputPasswordFormItem, {\n        [classNameFormInput]: true\n      })}\n      dependencies={dependencies}>\n      <Input\n        className={clsx(styles.customInputPasswordForm, {\n          [className]: true\n        })}\n        placeholder={placeholder}\n        autoComplete={autoComplete}\n        type=\"password\"\n      />\n    </Form.Item>\n  );\n}\n","import { Modal } from 'antd';\n\ninterface ITermOfServiceModalProps {\n  isShowTermOfServiceModal: boolean;\n  onCloseTermOfServiceModal: () => void;\n}\n\nconst TermOfServiceModal = ({\n  isShowTermOfServiceModal,\n  onCloseTermOfServiceModal\n}: ITermOfServiceModalProps) => {\n  return (\n    <>\n      <Modal\n        title=\"Term of Service\"\n        visible={isShowTermOfServiceModal}\n        onCancel={onCloseTermOfServiceModal}\n        footer={null}>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n        <p>Some contents...</p>\n      </Modal>\n    </>\n  );\n};\n\nexport default TermOfServiceModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"signUpPage\":\"styles_signUpPage__bnwcO\",\"titlePage\":\"styles_titlePage__PEsdH\",\"formWrap\":\"styles_formWrap__VXCRE\",\"titleSignUp\":\"styles_titleSignUp__c7lCv\",\"buttonSubmit\":\"styles_buttonSubmit__mAoya\",\"actionMore\":\"styles_actionMore__6dV1m\",\"termOfServiceText\":\"styles_termOfServiceText__GMhGu\"};","import { routePath } from './../../../routing/path.routing';\nimport ApiUtils from 'utils/api/api.utils';\nimport { useRequest } from 'ahooks';\nimport { API_PATH } from 'utils/api/constant';\nimport { ResponseBase } from 'utils/api/api.types';\nimport { useNavigate } from 'react-router-dom';\nimport { message } from 'antd';\n\ntype TSignUp = {\n  email: string;\n  username: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n};\n\nconst serviceSignUp = async (body: TSignUp) => {\n  return ApiUtils.post<any, ResponseBase<any>>(API_PATH.SIGN_UP, body);\n};\n\nexport const useSignUp = () => {\n  const navigate = useNavigate();\n\n  return useRequest(\n    async (data: any) => {\n      return serviceSignUp({\n        email: data.email?.trim(),\n        username: data.name?.trim(),\n        password: data.password?.trim(),\n        firstName: data?.name?.trim() || 'abc',\n        lastName: data?.firstName?.trim() || 'abc'\n      });\n    },\n    {\n      manual: true,\n      onSuccess: (r) => {\n        console.log('sign up success', r);\n        message.info('Sign up success');\n        navigate(routePath.SignIn);\n      },\n      onError: (e: any) => {\n        console.log('sign up error', e);\n        message.error(e?.content?.messageContent || 'Sign up error');\n      }\n    }\n  );\n};\n","import { Form } from 'antd';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport InputForm from 'libraries/form/input/input-form';\nimport InputPasswordForm from 'libraries/form/input/input-password-form';\nimport ContainerLayout from 'libraries/layouts/container.layout';\nimport TermOfServiceModal from './components/TermOfServiceModal';\nimport { RegexUtils } from 'utils/regex-helper';\n\nimport styles from './styles.module.scss';\nimport Button from 'libraries/UI/Button';\nimport { useSignUp } from './service';\n\nexport default function SignUpPage() {\n  const { t } = useTranslation();\n\n  const reqSignUp = useSignUp();\n\n  const [isShowTermOfServiceModal, setIsShowTermOfServiceModal] = useState(false);\n\n  const onSignUp = (values: any) => {\n    reqSignUp.run(values);\n  };\n\n  return (\n    <ContainerLayout title={t('sign_up.title')}>\n      <div className={styles.signUpPage}>\n        <h1 className={styles.titlePage}>{t('welcome_auth')}</h1>\n\n        <div className={styles.formWrap}>\n          <h3 className={styles.titleSignUp}>{t('sign_up.title')}</h3>\n          <Form layout=\"vertical\" name=\"basic\" onFinish={onSignUp}>\n            <div className=\"mb-16\">\n              <InputForm\n                label={t('email_address')}\n                name=\"email\"\n                rules={[\n                  {\n                    required: true,\n                    message: t('messages.errors.require', { field: t('email_address') })\n                  },\n                  {\n                    pattern: new RegExp(RegexUtils.RegexConstants.REGEX_EMAIL),\n                    message: `${t('messages.errors.email_invalid')}`\n                  }\n                ]}\n              />\n            </div>\n\n            <div className=\"mb-16\">\n              <InputForm\n                label={t('name')}\n                name=\"name\"\n                rules={[\n                  {\n                    required: true,\n                    message: t('messages.errors.require', { field: t('name') })\n                  },\n                  {\n                    max: 50,\n                    message: t('messages.errors.max_name', { max: 50 })\n                  },\n                  {\n                    whitespace: true,\n                    message: t('messages.errors.empty_name')\n                  }\n                ]}\n              />\n            </div>\n\n            <div className=\"mb-16\">\n              <InputPasswordForm\n                label={t('password')}\n                name=\"password\"\n                rules={[\n                  {\n                    validator: async (_, value) => {\n                      if (!value) {\n                        return Promise.reject(\n                          t('messages.errors.require', { field: t('password') })\n                        );\n                      }\n                      if (value?.length < 8) {\n                        return Promise.reject(t('messages.errors.min', { min: 8 }));\n                      }\n\n                      const regPassword = new RegExp(RegexUtils.RegexConstants.REGEX_PASSWORD);\n\n                      if (!regPassword.test(value)) {\n                        return Promise.reject(t('messages.errors.password_invalid'));\n                      }\n\n                      return Promise.resolve();\n                    }\n                  }\n                ]}\n              />\n            </div>\n\n            <div>\n              <InputPasswordForm\n                label={t('confirm_password')}\n                name=\"confirm_password\"\n                dependencies={['password']}\n                rules={[\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.reject(\n                          t('messages.errors.require', { field: t('confirm_password') })\n                        );\n                      }\n                      if (getFieldValue('password') === value) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(t('password_not_match'));\n                    }\n                  })\n                ]}\n              />\n            </div>\n\n            <Button htmlType=\"submit\" className={styles.buttonSubmit} loading={reqSignUp.loading}>\n              {t('continue')}\n            </Button>\n          </Form>\n\n          <div className={styles.actionMore}>\n            <p>\n              <span>By continuing, you’re agreeing to our </span>\n              <p\n                onClick={() => setIsShowTermOfServiceModal(true)}\n                className={styles.termOfServiceText}>\n                Terms of Service\n              </p>\n            </p>\n          </div>\n        </div>\n      </div>\n      <TermOfServiceModal\n        onCloseTermOfServiceModal={() => setIsShowTermOfServiceModal(false)}\n        isShowTermOfServiceModal={isShowTermOfServiceModal}\n      />\n    </ContainerLayout>\n  );\n}\n"],"names":["InputPasswordForm","label","placeholder","name","rules","autoComplete","dependencies","classNameFormInput","className","normalize","clsx","styles","type","isShowTermOfServiceModal","onCloseTermOfServiceModal","title","visible","onCancel","footer","serviceSignUp","body","ApiUtils","API_PATH","SignUpPage","t","useTranslation","reqSignUp","navigate","useNavigate","useRequest","data","email","trim","username","password","firstName","lastName","manual","onSuccess","r","console","log","message","routePath","onError","e","content","messageContent","useSignUp","useState","setIsShowTermOfServiceModal","layout","onFinish","values","run","required","field","pattern","RegExp","RegexUtils","max","whitespace","validator","_","value","Promise","reject","length","min","test","resolve","getFieldValue","Button","htmlType","loading","onClick"],"sourceRoot":""}